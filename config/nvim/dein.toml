# ------------------------------------------------------------------------------
# plugin manager
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/dein.vim'
hook_add = '''
  command! UpdatePlugins :call dein#update()
'''

# ------------------------------------------------------------------------------
# UI
# ------------------------------------------------------------------------------ 

[[plugins]]
repo = 'jacoborus/tender.vim'
hook_add = '''
  set termguicolors
  syntax enable
  colorscheme tender
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  function! CocCurrentFunction()
      return get(b:, 'coc_current_function', '')
  endfunction
  let g:lightline = {
    \ 'colorscheme': 'tender',
    \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'cocstatus': 'coc#status',
    \   'currentfunction': 'CocCurrentFunction',
    \   'gitbranch': 'fugitive#head'
    \ },
    \ }
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup = 1
  let g:indent_guides_start_level = 1
  let g:indent_guides_guide_size = 1
  let g:indent_guides_default_mapping = 0
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  set guifont=Hack\ Nerd\ Font\ Mono:h11
'''

# ------------------------------------------------------------------------------
# basic
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  nmap n <Plug>(anzu-n-with-echo)
  nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
  " remove hilight & preview
  nmap <silent> <Esc><Esc> :pclose<CR>:nohlsearch<CR><Plug>(anzu-clear-search-status)
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  let g:tcomment_maps = 0
  nmap <silent> <Leader>i :TComment<CR>
  vmap <silent> <Leader>i :TComment<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'rcmdnk/yankround.vim'
hook_add = '''
  nmap p <Plug>(yankround-p)
  nmap P <Plug>(yankround-P)
  nmap gp <Plug>(yankround-gp)
  nmap gP <Plug>(yankround-gP)
  nmap <C-p> <Plug>(yankround-prev)
  nmap <C-n> <Plug>(yankround-next)
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
hook_add = '''
  nmap <silent> <Leader>j :SplitjoinJoin<CR>
  nmap <silent> <Leader>s :SplitjoinSplit<CR>
'''

[[plugins]]
repo = 't9md/vim-quickhl'
hook_add = '''
  nmap <Leader>h <Plug>(quickhl-manual-this)
  nmap <Leader>H <Plug>(quickhl-manual-reset)
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-textobj-function'

[[plugins]]
repo = 'tpope/vim-speeddating'

# ------------------------------------------------------------------------------
# filer
# ------------------------------------------------------------------------------


[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
  call defx#custom#option('_', {
	      \ 'columns': 'indent:icons:filename:git',
	      \ 'split': 'vertical',
	      \ 'winwidth': 30,
	      \ 'direction': 'topleft',
	      \ 'show_ignored_files': 1,
	      \ 'toggle': 1
	      \ })
  nmap <silent> <Leader>n :Defx<space>-search=`expand('%:p')`<CR>
  autocmd FileType defx call s:defx_my_settings()
  function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <CR> defx#do_action('drop')
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('drop')
    nnoremap <silent><buffer><expr> <Right> defx#do_action('drop')
    nnoremap <silent><buffer><expr> <C-t> defx#do_action('drop', ':tabedit')
    nnoremap <silent><buffer><expr> <C-s> defx#do_action('drop', ':split')
    nnoremap <silent><buffer><expr> <C-v> defx#do_action('drop', ':vsplit')
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> l defx#do_action('open_tree')
    nnoremap <silent><buffer><expr> h defx#do_action('close_tree')
    nnoremap <silent><buffer><expr> o defx#do_action('open_tree_recursive')
    nnoremap <silent><buffer><expr> <C-h> defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> <Left> defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
  endfunction
  let g:defx_icons_enable_syntax_highlight = 1
  let g:defx_icons_column_length = 2
  let g:defx_icons_directory_icon = ''
  let g:defx_icons_mark_icon = '*'
  let g:defx_icons_parent_icon = ''
  let g:defx_icons_default_icon = ''
  let g:defx_icons_directory_symlink_icon = ''
  " Options below are applicable only when using "tree" feature
  let g:defx_icons_root_opened_tree_icon = ''
  let g:defx_icons_nested_opened_tree_icon = ''
  let g:defx_icons_nested_closed_tree_icon = ''
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
depends = 'defx.nvim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

# ------------------------------------------------------------------------------
# filetype
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'Shougo/context_filetype.vim'

# ------------------------------------------------------------------------------
# LSP
# ------------------------------------------------------------------------------


[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
hook_add = '''
  " use <tab> for trigger completion and navigate to the next complete item
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
  endfunction
  inoremap <silent><expr> <TAB>
    \ pumvisible() ? coc#_select_confirm() :
    \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
    \ <SID>check_back_space() ? "\<TAB>" :
    \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  " navigate completion list
  inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
  inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<C-k>"
  inoremap <expr> <Down> pumvisible() ? "\<C-n>" : "\<Down>"
  inoremap <expr> <Up> pumvisible() ? "\<C-p>" : "\<Up>"
  " Close preview window when completion is done
  autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
  " confirm complete (select the first completion item and confirm completion when no item have selected)
  inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : 
                                             \"\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
  nmap <silent> <Leader>c :CocList<Space>commands<CR>
  nmap <silent> <Leader>s :CocList<Space>words<CR>
  nmap <silent> <Leader>f :CocList<Space>files<CR>
  nmap <silent> <Leader>m :CocList<Space>mru<CR>
  nmap <silent> <Leader>g :CocList<Space>grep<CR>
  nmap <silent> <Leader>b :CocList<Space>buffers<CR>
  nmap <silent> <Leader>e :CocList diagnostics<CR>
  nmap <silent> <Leader>F <Plug>(coc-format)
  vmap <silent> <Leader>F <Plug>(coc-format-selected)
  xmap <silent> <Leader>F <Plug>(coc-format-selected)
  nmap <silent> <Leader>R <Plug>(coc-rename)
  nmap <silent> <Leader>A <Plug>(coc-codeaction)
  vmap <silent> <Leader>A <Plug>(coc-codeaction-selected)
  xmap <silent> <Leader>A <Plug>(coc-codeaction-selected)
  nmap <silent> <Leader>[ <Plug>(coc-diagnostic-prev)
  nmap <silent> <Leader>] <Plug>(coc-diagnostic-next)
  nmap <silent> <Leader>d <Plug>(coc-definition)
  nmap <silent> <Leader>y <Plug>(coc-type-definition)
  nmap <silent> <Leader>p <Plug>(coc-implementation)
  nmap <silent> <Leader>r <Plug>(coc-references)
  nmap <silent> <Leader>q <Plug>(coc-fix-current)
  nnoremap <silent> <Leader>k :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction
  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')
'''

[[plugins]]
repo = 'neoclide/coc-highlight'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-css'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
name = 'coc-dictionary'
repo = 'neoclide/coc-sources'
rtp = 'packages/dictionary'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
name = 'coc-emoji'
repo = 'neoclide/coc-sources'
rtp = 'packages/emoji'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-git'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-highlight'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-html'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

# [[plugins]]
# repo = 'neoclide/coc-java'
# depends = 'coc.nvim'
# build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-json'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-lists'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-neco'
depends = 'coc.nvim'

[[plugins]]
repo = 'marlonfan/coc-phpls'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-python'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-rls'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-snippets'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-solargraph'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'fannheyward/coc-sql'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-tabnine'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-tsserver'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
name = 'coc-tag'
repo = 'neoclide/coc-sources'
rtp = 'packages/tag'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'iamcco/coc-vimlsp'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-vetur'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
name = 'coc-word'
repo = 'neoclide/coc-sources'
rtp = 'packages/word'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'neoclide/coc-yaml'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

[[plugins]]
repo = 'fannheyward/coc-xml'
depends = 'coc.nvim'
build = 'yarn install --frozen-lockfile'

# ------------------------------------------------------------------------------
# git
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-rhubarb'
depends = 'vim-fugitive' 

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_map_keys = 0
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'tyru/open-browser-github.vim'
depends = 'open-browser.vim'

# ------------------------------------------------------------------------------
# tool
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'freitass/todo.txt-vim'

# ------------------------------------------------------------------------------
# extension for vim
# ------------------------------------------------------------------------------

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]]
repo = 'vim-jp/vital.vim'

[[plugins]]
repo = '~/src/github.com/abekoh/snipslack.vim'
